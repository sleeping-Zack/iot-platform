# Generated by Django 5.0.6 on 2025-08-17 13:29

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Device",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("device_code", models.CharField(max_length=64, unique=True)),
                ("device_name", models.CharField(max_length=128)),
                ("location", models.CharField(blank=True, max_length=128)),
                ("sensor_type", models.CharField(default="temperature", max_length=64)),
                ("unit", models.CharField(blank=True, default="Â°C", max_length=16)),
                ("protocol", models.CharField(blank=True, max_length=32)),
                ("threshold_hi", models.FloatField(blank=True, null=True)),
                ("threshold_lo", models.FloatField(blank=True, null=True)),
                ("calibration_k", models.FloatField(blank=True, null=True)),
                ("calibration_b", models.FloatField(blank=True, null=True)),
                ("fw_version", models.CharField(blank=True, max_length=32)),
                (
                    "sampling_hz",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("last_seen", models.DateTimeField(blank=True, null=True)),
                ("notes", models.CharField(blank=True, max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "devices",
            },
        ),
        migrations.CreateModel(
            name="CloudData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("device_id", models.IntegerField()),
                ("sensor_value", models.FloatField()),
                ("ts", models.DateTimeField()),
                ("synced_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "cloud_data",
                "indexes": [
                    models.Index(
                        fields=["device_id", "ts"], name="cloud_data_device__ccd032_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="DailySummary",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("day", models.DateField()),
                ("device_id", models.IntegerField()),
                ("count_records", models.IntegerField()),
                ("avg_value", models.FloatField(null=True)),
                ("max_value", models.FloatField(null=True)),
                ("min_value", models.FloatField(null=True)),
                ("alert_count", models.IntegerField(default=0)),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "daily_summary",
                "unique_together": {("day", "device_id")},
            },
        ),
        migrations.CreateModel(
            name="DeviceCredentials",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("api_key", models.CharField(max_length=64, unique=True)),
                ("hmac_secret", models.CharField(max_length=64)),
                ("rotated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="iotcore.device"
                    ),
                ),
            ],
            options={
                "db_table": "device_credentials",
            },
        ),
        migrations.CreateModel(
            name="EdgeData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("sensor_value", models.FloatField()),
                ("raw_value", models.FloatField(blank=True, null=True)),
                ("ts", models.DateTimeField(auto_now_add=True)),
                ("source_ts", models.DateTimeField(blank=True, null=True)),
                ("quality", models.CharField(default="GOOD", max_length=12)),
                ("meta", models.JSONField(blank=True, null=True)),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="iotcore.device"
                    ),
                ),
            ],
            options={
                "db_table": "edge_data",
            },
        ),
        migrations.CreateModel(
            name="Alert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("level", models.CharField(max_length=16)),
                ("message", models.CharField(blank=True, max_length=512)),
                ("ts", models.DateTimeField(auto_now_add=True)),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="iotcore.device"
                    ),
                ),
                (
                    "edge_data",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="iotcore.edgedata",
                    ),
                ),
            ],
            options={
                "db_table": "alerts",
            },
        ),
        migrations.CreateModel(
            name="SyncQueue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("enqueued_at", models.DateTimeField(auto_now_add=True)),
                (
                    "edge_data",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="iotcore.edgedata",
                    ),
                ),
            ],
            options={
                "db_table": "sync_queue",
            },
        ),
        migrations.AddIndex(
            model_name="edgedata",
            index=models.Index(
                fields=["device", "ts"], name="edge_data_device__b01f02_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(
                fields=["device", "ts"], name="alerts_device__3acb3a_idx"
            ),
        ),
    ]
